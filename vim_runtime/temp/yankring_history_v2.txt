" -> snipMate (beside <TAB> support <Ctrl-j>)"ino <c-j> <c-r>=snipMate#TriggerSnippet()<cr>"snor <c-j> <esc><right><c-r>=snipMate#TriggerSnippet()<cr>,V
",v
,V
"let g:template_path='~/.vim_runtime/vim-addons/load_template/template/',V
" LoadTemplate,V
" Rmap VIM 0 to first non-blank charactermap 0 ^" Moving a line of text using ALT+[jk] or Command+[jk] on macnmap <M-j> mz:m+<cr>`znmap <M-k> mz:m-2<cr>`zvmap <M-j> :m'>+<cr>`<my`>mzgv`yo`zvmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`zif has("mac") || has("macunix")  nmap <D-j> <M-j>  nmap <D-k> <M-k>  vmap <D-j> <M-j>  vmap <D-k> <M-k>endif" Delete trailing white space on save, useful for Python and CoffeeScript ;)func! DeleteTrailingWS()  exe "normal mz"  %s/\s\+$//ge  exe "normal `z"endfuncautocmd BufWrite *.py :call DeleteTrailingWS()autocmd BufWrite *.coffee :call DeleteTrailingWS(),V
  	\ 'github:altercation/vim-colors-solarized',,V
  	\ 'github:amix/open_file_under_cursor.vim',,V
  	\ 'ctrlp',,V
    \ 'load_template',,V
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml">	<head>		<title> new document </title>		<meta name="generator" content="vimer.cn" />		<meta name="author" content="" />		<meta name="keywords" content="" />		<meta name="description" content="" />	</head>	<body>	</body></html>,V
TEMPLATE_CURSOR,v
/*=============================================================================#  Author:          #  Email:           #  FileName:        #  Version:         #  LastChange:      #  Description:     #  History:         =============================================================================*/#include <iostream>#include <string>#include <vector>#include <map>using namespace std;int main(int argc,char* argv[]){	TEMPLATE_CURSOR	return 0;},V
test,v
PACE,v
>,v
leader,v
<,v
vimrc,v
map <leader>t<leader> :tabnext ,V
set RUNTIME_PATH=~/.vim_test,V
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" STATUS LINE""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" Status line settings"set laststatus=2""set statusline=""set statusline+=%<\			" cut at start""set statusline+=%2*[%n%H%M%R%W]%*\	""set statusline+=%-40f\		" relative path""set statusline+=%=			" separate between right- and left-aligned""set statusline+=%1*%y%*%*\		" file type,V
 ,v
source $HOME/.vim_test/vimrcs/vimrc.vim,V
 flags,v
 end,v
 number,v
buffer,v
" buffer,V
" buffer,v
,,v
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""" => Plugins config """""""""""""""""""""""""""""""""""""""""""""""""""""""""" Rmap VIM 0 to first non-blank charactermap 0 ^" Moving a line of text using ALT+[jk] or Command+[jk] on macnmap <M-j> mz:m+<cr>`znmap <M-k> mz:m-2<cr>`zvmap <M-j> :m'>+<cr>`<my`>mzgv`yo`zvmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`zif has("mac") || has("macunix")  nmap <D-j> <M-j>  nmap <D-k> <M-k>  vmap <D-j> <M-j>  vmap <D-k> <M-k>endif" Delete trailing white space on save, useful for Python and CoffeeScript ;)func! DeleteTrailingWS()  exe "normal mz"  %s/\s\+$//ge  exe "normal `z"endfuncautocmd BufWrite *.py :call DeleteTrailingWS()autocmd BufWrite *.coffee :call DeleteTrailingWS()" FuzzyFindermap <leader>ff :FufFile<CR>map <leader>fg :FufTaggedFile<CR>map <leader>ft :FufTag<CR>map <leader>fb :FufBuffer<CR>" bufExplorerlet g:bufExplorerDefaultHelp=0let g:bufExplorerShowRelativePath=1let g:bufExplorerFindActive=1let g:bufExplorerSortBy='name'map <leader>o :BufExplorer<cr>" MRU pluginlet MRU_Max_Entries = 400map <leader>f :MRU<CR>" YankRingif MySys()=="win32"    " Don't do anythingelse    let g:yankring_history_dir = '~/.vim_test/temp'endif" snipMate (beside <TAB> support <Ctrl-j>)"ino <c-j> <c-r>=snipMate#TriggerSnippet()<cr>"snor <c-j> <esc><right><c-r>=snipMate#TriggerSnippet()<cr>" Vim greplet Grep_Skip_Dirs = "RCS CVS SCCS .svn generated"set grepprg=/bin/grep\ -nH""" NERDTree " Shotcuts" Ctrl+w+h -> left tree directory window" Ctrl+w+l -> right opened file window" [Ctrl+w]^n -> switch between above two windows" Open the NERDTree window without INSERT mode on the left sidemap <leader>nt :NERDTreeToggle<cr>map <leader>nb :NERDTreeFromBookmarkmap <leader>nf :NERDTreeFind<cr>""" Taglist let Tlist_Show_One_File=1           " Only showing the current filelet Tlist_Exit_OnlyWindow=1         " If taglist is the last window then quitlet Tlist_Use_Right_Window=1        " Showing the taglist window on the right sidelet Tlist_File_Fold_Auto_Close=1    " Aoto folding" Open the Taglist window without INSERT mode on the right sidemap <leader>tl :Tlist<CR><c-l>" LoadTemplatelet g:template_path='~/.vim/vim-addons/load_template/template/'""" AuthorInfolet g:vimrc_author='Michael.Cho'let g:vimrc_email='zuow11@gmail.com'let g:vimrc_homepage='http://www.zone4cho.com'" Overload template files and authorinfo with Ctrl+E"nmap <F4> :AuthorInfoDetect<cr>"map <c-e> <ESC>:LoadTemplate<CR><ESC>:AuthorInfoDetect<CR><ESC>Gi"imap <c-e> <ESC>:LoadTemplate<CR><ESC>:AuthorInfoDetect<CR><ESC>Gi"vmap <c-e> <ESC>:LoadTemplate<CR><ESC>:AuthorInfoDetect<CR><ESC>Gi" => calendar map <F3> :Calendar<cr>" => SnipMatelet g:snips_author = 'MichaelCho',V
"       -> VIM-Addon-Manager,V
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""" => VIM-Addon-Manager"""""""""""""""""""""""""""""""""""""""""""""""""""""""""fun! EnsureVamIsOnDisk(vam_install_path)  " windows users may want to use http://mawercer.de/~marc/vam/index.php  " to fetch VAM, VAM-known-repositories and the listed plugins  " without having to install curl, 7-zip and git tools first  " -> BUG [4] (git-less installation)  let is_installed_c = "isdirectory(a:vam_install_path.'/vim-addon-manager/autoload')"  if eval(is_installed_c)    return 1  else    if 1 == confirm("Clone VAM into ".a:vam_install_path."?","&Y\n&N")      " I'm sorry having to add this reminder. Eventually it'll pay off.      call confirm("Remind yourself that most plugins ship with ".                  \"documentation (README*, doc/*.txt). It is your ".                  \"first source of knowledge. If you can't find ".                  \"the info you're looking for in reasonable ".                  \"time ask maintainers to improve documentation")      call mkdir(a:vam_install_path, 'p')      execute '!git clone --depth=1 git://github.com/MarcWeber/vim-addon-manager '.shellescape(a:vam_install_path, 1).'/vim-addon-manager'      " VAM runs helptags automatically when you install or update       " plugins      exec 'helptags '.fnameescape(a:vam_install_path.'/vim-addon-manager/doc')    endif    return eval(is_installed_c)  endifendfunfun! SetupVAM()  " Set advanced options like this:  " let g:vim_addon_manager = {}  " let g:vim_addon_manager.key = value  "     Pipe all output into a buffer which gets written to disk  " let g:vim_addon_manager.log_to_buf =1  " Example: drop git sources unless git is in PATH. Same plugins can  " be installed from www.vim.org. Lookup MergeSources to get more control  " let g:vim_addon_manager.drop_git_sources = !executable('git')  " let g:vim_addon_manager.debug_activation = 1  " VAM install location:  let vam_install_path = expand('$HOME') . '/.vim_test/vim-addons'  if !EnsureVamIsOnDisk(vam_install_path)    echohl ErrorMsg | echomsg "No VAM found!" | echohl NONE    return  endif  exec 'set runtimepath+='.vam_install_path.'/vim-addon-manager'  " Tell VAM which plugins to fetch & load:  call vam#ActivateAddons([  	\ 'FuzzyFinder',  	\ 'pathogen',  	\ 'YankRing',  	\ 'snipmate',  	\ 'bufexplorer.zip',  	\ 'The_NERD_tree',  	\ 'Powerline',  	\ 'ctrlp',  	\ 'mru',  	\ 'github:amix/open_file_under_cursor.vim',  	\ 'peaksea',  	\ 'github:altercation/vim-colors-solarized',    \ 'taglist',    \ 'load_template',    \ 'github:scrooloose/nerdcommenter',    \ 'AuthorInfo',    \ 'ZenCoding',    \ 'vimwiki',    \ 'calendar%52'  	\ ], {'auto_install' : 0})  " sample: call vam#ActivateAddons(['pluginA','pluginB', ...], {'auto_install' : 0})  " Addons are put into vam_install_path/plugin-name directory  " unless those directories exist. Then they are activated.  " Activating means adding addon dirs to rtp and do some additional  " magic  " How to find addon names?  " - look up source from pool  " - (<c-x><c-p> complete plugin names):  " You can use name rewritings to point to sources:  "    ..ActivateAddons(["github:foo", .. => github://foo/vim-addon-foo  "    ..ActivateAddons(["github:user/repo", .. => github://user/repo  " Also see section "2.2. names of addons and addon sources" in VAM's documentationendfuncall SetupVAM(),V
""""""""""""""""""""""""""""""""""""""""""""""""""""""""",V
" => VIM-Addon-Manager,V
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""" => VIM-Addon-Manager""""""""""""""""""""""""""""""""""""""""""""""""""""""""",V
